// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  email        String      @unique
  password     String
  first_name   String
  last_name    String
  gender       String
  photo        String?
  phone_number String?
  timezone     String?
  is_active    Boolean     @default(true)
  is_staff     Boolean     @default(false)
  is_superuser Boolean     @default(false)
  created_at   DateTime    @default(now())
  update_at    DateTime?   @updatedAt
  last_login   DateTime?
  birthdate    DateTime
  quizzes      Quiz[]
  candidatos   Candidato[]
}

model Quiz {
  id             String         @id @default(uuid())
  name           String
  description    String?
  skill_level_id String
  challenge_type ChallengeType
  max_time       Int?
  created_by_id  String
  created_at     DateTime       @default(now())
  update_at      DateTime?      @updatedAt
  is_active      Boolean        @default(true)
  quiz_question  QuizQuestion[]

  User         User?       @relation(fields: [userId], references: [id])
  userId       String?
  SkillLevel   SkillLevel? @relation(fields: [skillLevelId], references: [id])
  skillLevelId String?
  Candidato    Candidato?  @relation(fields: [candidatoId], references: [id])
  candidatoId  String?
}

model SkillLevel {
  id        String    @id @default(uuid())
  cell_id   String
  seniority Seniority
  quiz      Quiz[]
  Cell      Cell?     @relation(fields: [cellId], references: [id])
  cellId    String?
}

model Candidato {
  id         String          @id @default(uuid())
  user_id    String
  created_at DateTime        @default(now())
  updated_at DateTime?       @updatedAt
  is_active  Boolean         @default(true)
  score      Int?
  quizzes    Quiz[] 
  challenges Challenge[]
  hardSkills HardSkillUser[]
  softSkills SoftSkillUser[]
  languages  LanguageUser[]
  roles      RolUser[]
  socials    Socials[]
  User       User?           @relation(fields: [userId], references: [id])
  userId     String?
}

model Challenge {
  id          String    @id @default(uuid())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  Candidato   Candidato? @relation(fields: [candidatoId], references: [id])
  candidatoId String?
}

model HardSkillUser {
  id         String    @id @default(uuid())
  skill_name String
  level      String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  Candidato   Candidato? @relation(fields: [candidatoId], references: [id])
  candidatoId String?
}

model SoftSkillUser {
  id         String    @id @default(uuid())
  skill_name String
  level      String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  Candidato   Candidato? @relation(fields: [candidatoId], references: [id])
  candidatoId String?
}

model LanguageUser {
  id          String    @id @default(uuid())
  language    String
  proficiency String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  Candidato   Candidato? @relation(fields: [candidatoId], references: [id])
  candidatoId String?
}

model RolUser {
  id          String    @id @default(uuid())
  role_name   String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  Candidato   Candidato? @relation(fields: [candidatoId], references: [id])
  candidatoId String?
}

model Socials {
  id         String    @id @default(uuid())
  platform   String
  url        String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  Candidato   Candidato? @relation(fields: [candidatoId], references: [id])
  candidatoId String?
}

model Cell {
  id          String       @id @default(uuid())
  name        String
  is_active   Boolean      @default(true)
  module_id   String
  skill_level SkillLevel[]
  question    Question[]
  Module      Module?      @relation(fields: [moduleId], references: [id])
  moduleId    String?
}

model Module {
  id        String  @id @default(uuid())
  name      String
  is_active Boolean @default(true)
  cell      Cell[]
}

model Question {
  id             String         @id @default(uuid())
  question       String
  seniority      Seniority
  type           QuestionType
  options        String[]
  correct_option Int[]
  explanation    String?
  link           String?
  is_active      Boolean
  created_at     DateTime       @default(now())
  update_at      DateTime?      @updatedAt
  quiz_question  QuizQuestion[]
  cell           Cell[]
}

model QuizQuestion {
  id          String    @id @default(uuid())
  is_active   Boolean
  quiz_id     String
  question_id String
  Quiz        Quiz?     @relation(fields: [quizId], references: [id])
  quizId      String?
  Question    Question? @relation(fields: [questionId], references: [id])
  questionId  String?
}

enum ChallengeType {
  immediate
  interview
  collaborative
  timed
}

enum QuestionType {
  multiple_choice
  simple_choice
  true_false
  open_ended
  code
}

enum Seniority {
  trainee
  junior
  middle
  senior
}
