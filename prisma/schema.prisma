// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  first_name   String
  last_name    String
  gender       String
  photo        String?
  phone_number String?
  timezone     String?
  is_active    Boolean       @default(true)
  is_staff     Boolean       @default(false)
  is_superuser Boolean       @default(false)
  created_at   DateTime      @default(now())
  update_at    DateTime?     @updatedAt
  last_login   DateTime?
  birthdate    DateTime

  quizzes      Quiz[]        @relation("UserQuizzes")
  challenges   Challenge[]    @relation("UserChallenges")
  hardSkills   HardSkillUser[] @relation("UserHardSkills")
  softSkills   SoftSkillUser[] @relation("UserSoftSkills")
  languages    LanguageUser[] @relation("UserLanguages")
  roles        RolUser[]      @relation("UserRoles")
  socials      Socials[]      @relation("UserSocials")
}

model Quiz {
  id             String         @id @default(uuid())
  name           String
  description    String?
  challenge_type ChallengeType
  max_time       Int?
  created_at     DateTime       @default(now())
  update_at      DateTime?      @updatedAt
  is_active      Boolean        @default(true)

  users          User[]         @relation("UserQuizzes")
}

model Challenge {
  id          String    @id @default(uuid())
  name        String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  users       User[]    @relation("UserChallenges")
}

model HardSkillUser {
  id         String    @id @default(uuid())
  skill_name String
  level      String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  users      User[]    @relation("UserHardSkills")
}

model SoftSkillUser {
  id         String    @id @default(uuid())
  skill_name String
  level      String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  users      User[]    @relation("UserSoftSkills")
}

model LanguageUser {
  id          String    @id @default(uuid())
  language    String
  proficiency String
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  users       User[]    @relation("UserLanguages")
}

model RolUser {
  id          String    @id @default(uuid())
  role_name   String
  description String?
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  users       User[]    @relation("UserRoles")
}

model Socials {
  id         String    @id @default(uuid())
  platform   String
  url        String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  users      User[]    @relation("UserSocials")
}

model Cell {
  id          String       @id @default(uuid())
  name        String
  is_active   Boolean      @default(true)
  module_id   String
  questions   Question[]
  Module      Module?      @relation(fields: [moduleId], references: [id])
  moduleId    String?
}

model Module {
  id        String  @id @default(uuid())
  name      String
  is_active Boolean @default(true)
  cell      Cell[]
}

model Question {
  id             String         @id @default(uuid())
  question       String
  seniority      Seniority
  type           QuestionType
  options        String[]
  correct_option Int[]
  explanation    String?
  link           String?
  is_active      Boolean
  created_at     DateTime       @default(now())
  update_at      DateTime?      @updatedAt

  cell           Cell[]
}

enum ChallengeType {
  immediate
  interview
  collaborative
  timed
}

enum QuestionType {
  multiple_choice
  simple_choice
  true_false
  open_ended
  code
}

enum Seniority {
  trainee
  junior
  middle
  senior
}
