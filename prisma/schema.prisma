generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  first_name   String
  last_name    String
  gender       String
  photo        String?
  phone_number String?
  timezone     String?
  is_active    Boolean       @default(true)
  is_staff     Boolean       @default(false)
  is_superuser Boolean       @default(false)
  created_at   DateTime      @default(now())
  updated_at   DateTime?     @updatedAt
  last_login   DateTime?
  birthdate    DateTime

  quizzes       Quiz[]        
  challenges    Challenge[]    
  hardSkills    HardSkill[]      @relation("HardSkillUser")
  softSkills    SoftSkill[]      @relation("SoftSkillUser")
  socials       SocialNetwork[]  @relation("SocialNetworkUser")
  languagesUser LanguageUser[]
  roles         RoleUser[]
}

model HardSkill {
  id          String    @id @default(uuid())
  name        String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  users       User[]    @relation("HardSkillUser")
}

model SoftSkill {
  id          String    @id @default(uuid())
  name        String    @unique   
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  users       User[]    @relation("SoftSkillUser")
}

model SocialNetwork {
  id         String    @id @default(uuid())
  platform   String
  url        String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  users      User[]    @relation("SocialNetworkUser")
}

model Language {
  id          String    @id @default(uuid())
  language    String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  language_user       LanguageUser[]
}

model LanguageUser {
  id            String    @id @default(uuid())
  language      Language  @relation(fields: [language_id], references: [id])
  language_id   String
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String
  level         Level
}

model Role {
  id          String    @id @default(uuid())
  name        String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime? @updatedAt

  role_user   RoleUser[]
}

model RoleUser {
  id          String        @id @default(uuid())
  role        Role      @relation(fields: [role_id], references: [id])
  role_id     String
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
  seniority   Seniority
}

model Module {
  id        String  @id @default(uuid())
  name      String  @unique
  is_active Boolean @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  cell      Cell[]
}

model Cell {
  id          String        @id @default(uuid())
  name        String
  is_active   Boolean       @default(true)
  module      Module        @relation(fields: [module_id], references: [id])
  module_id   String
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  quizzes     Quiz[]     
}

model Quiz {
  id              String         @id @default(uuid())
  name            String         @unique
  description     String?
  cell            Cell           @relation(fields: [cell_id], references: [id])
  cell_id         String
  seniority       Seniority
  challenge_type  ChallengeType
  max_time        Int?
  created_by      User           @relation(fields: [created_by_id], references: [id])
  created_by_id   String
  created_at      DateTime       @default(now())
  updated_at      DateTime?      @updatedAt
  is_active       Boolean        @default(true)
  questions       Question[]
  challenges      Challenge[]
}

model Question {
  id              String       @id @default(uuid()) 
  question        String       @unique
  seniority       Seniority
  type            QuestionType
  options         String[]
  correct_option  Int[]
  explanation     String?
  link            String?
  is_active       Boolean
  created_at      DateTime      @default(now())
  updated_at      DateTime?     @updatedAt
  quiz            Quiz          @relation(fields: [quiz_id], references: [id])
  quiz_id         String
}

model Challenge {
  id            String    @id @default(uuid())
  calification  Int
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  quiz          Quiz      @relation(fields: [quiz_id], references: [id])
  quiz_id       String
  user          User      @relation(fields: [user_id], references: [id])
  user_id       String
}
enum ChallengeType {
  immediate
  interview
  collaborative
  timed
}

enum ChallengeState {
  pending
  assigned
  evaluated
}

enum QuestionType {
  multiple_choice
  simple_choice
  true_false
  open_ended
  code
}

enum Seniority {
  trainee
  junior
  middle
  senior
}

enum Level {
  native
  A1
  A2
  B1
  B2
  C1
  C2
}

